local com = import 'lib/commodore.libjsonnet';
local kap = import 'lib/kapitan.libjsonnet';
local kube = import 'lib/kube.libjsonnet';
local utils = import 'utils.libsonnet';
local inv = kap.inventory();

// The hiera parameters for the component
local params = inv.parameters.rbac;

{
  [if params.manageNamespace then 'namespace']: kube.Namespace(params.namespace),
  serviceaccounts: com.generateResources(
    params.serviceaccounts,
    function(name) kube.ServiceAccount(utils.namespacedName(name).name) {
      metadata+: {
        namespace: utils.namespacedName(name).namespace,
      },
    }
  ),
  serviceaccount_tokens: com.generateResources(
    params.serviceaccounts,
    function(name) kube.Secret(utils.namespacedName(name).name) {
      metadata+: {
        namespace: utils.namespacedName(name).namespace,
        annotations: {
          'kubernetes.io/service-account.name': utils.namespacedName(name).name,
        },
      },
      // Ensure empty `data` field is omitted so that ArgoCD doesn't get
      // confused by the autogenerated contents.
      data:: {},
      type: 'kubernetes.io/service-account-token',
    },
  ),
  clusterRoles: [
    utils.processRole(cr)
    for cr in com.generateResources(params.clusterroles, kube.ClusterRole)
  ],
  clusterRoleBindings: [
    utils.processRoleBinding(crb)
    for crb in
      com.generateResources(params.clusterrolebindings, function(name) kube._Object('rbac.authorization.k8s.io/v1', 'ClusterRoleBinding', name))
  ],
  roles: [
    utils.processRole(r)
    for r in com.generateResources(
      params.roles,
      function(name) kube.Role(utils.namespacedName(name).name) {
        metadata+: {
          namespace: utils.namespacedName(name).namespace,
        },
      }
    )
  ],
  roleBindings: [
    utils.processRoleBinding(rb)
    for rb in com.generateResources(
      params.rolebindings,
      function(name) kube._Object('rbac.authorization.k8s.io/v1', 'RoleBinding', utils.namespacedName(name).name) {
        metadata+: {
          namespace: utils.namespacedName(name).namespace,
        },
      }
    )
  ],
}
